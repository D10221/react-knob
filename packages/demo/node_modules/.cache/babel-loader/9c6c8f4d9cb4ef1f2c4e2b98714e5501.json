{"ast":null,"code":"import _objectSpread from \"/home/daniel/code/@d10221-react-knob/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/daniel/code/@d10221-react-knob/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/daniel/code/@d10221-react-knob/packages/demo/src/knob/Knob.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { BASE_HEIGHT } from \"./Constants\";\nimport Rotate from \"./rotate\";\nimport css from \"./css\";\nimport KnobHandle from \"./KnobHandle\";\nimport KnobInner from \"./KnobInner\";\n\nfunction snap(number, increment = number, offset = number) {\n  return Math.round(number / increment) * increment + offset;\n}\n\nfunction emptyKnobState() {\n  return {\n    topPosition: 0,\n    xPosition: 0,\n    scale: 1,\n    knobCenter: [],\n    cursorPos: []\n  };\n}\n\nfunction getNormalizedValue(value, min, max) {\n  return (value - min) / (max - min);\n}\n\nconst Knob = ({\n  value = 0,\n  min = 0,\n  max = 100,\n  step = 1,\n  size = undefined,\n  bufferSize = 360,\n  //\n  onChange = undefined,\n  children = undefined\n}) => {\n  const _useState = useState(emptyKnobState()),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        _setState = _useState2[1];\n\n  function setState(changes) {\n    _setState(_objectSpread({}, state, {}, changes));\n  }\n\n  function startDrag(e) {\n    e.preventDefault();\n    const knobRect = e.currentTarget.getBoundingClientRect();\n    const knobCenter = [, knobRect.top + knobRect.height / 2];\n    const distance = Math.abs(e.clientX - knobRect.left + knobRect.width / 2);\n    const scale = distance / 200 + 1;\n    const topPosition = e.clientY - (BASE_HEIGHT * scale - getNormalizedValue(value, min, max) * (BASE_HEIGHT * scale));\n\n    function handleDrag(e) {\n      e.preventDefault();\n      const xPosition = e.clientX;\n      const tempY = e.clientY;\n      const xDistance = Math.abs(xPosition - (knobRect.left + knobRect.width / 2));\n      const scale = xDistance / 200 + 1;\n      let topPosition = state.topPosition; // handle guide Y repositioning\n\n      if (tempY < topPosition) {\n        topPosition = tempY;\n      }\n\n      if (tempY > topPosition + BASE_HEIGHT * scale) {\n        topPosition = tempY - BASE_HEIGHT * scale;\n      }\n\n      const normalizedValue = (100 - (tempY - topPosition) * (100 / (BASE_HEIGHT * scale))) / 100;\n      const unnormalizedValue = snap(normalizedValue * (max - min), step, min);\n      setState({\n        topPosition,\n        scale,\n        cursorPos: [e.clientX, e.clientY]\n      });\n\n      if (unnormalizedValue !== value) {\n        if (onChange) {\n          setTimeout(() => onChange(unnormalizedValue));\n        }\n      }\n    }\n\n    document.addEventListener(\"mousemove\", handleDrag, false);\n    document.addEventListener(\"mouseup\", function endDrag() {\n      document.removeEventListener(\"mousemove\", handleDrag, false);\n      document.removeEventListener(\"mouseup\", endDrag, false);\n      setState(emptyKnobState());\n    }, false);\n    setState({\n      xPosition: e.clientX,\n      topPosition,\n      scale,\n      knobCenter,\n      cursorPos: [e.clientX, e.clientY]\n    });\n  }\n\n  const rotation = getNormalizedValue(value, min, max) * bufferSize - bufferSize / 2;\n  const className = \"xxx-yyy-000\";\n  const style = `\n  margin:0;\npadding: 0;\noverflow: hidden;\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\njustify-items: center;\nalign-items: center;\nalign-content: center;\n  `;\n  useEffect(() => css(style, className));\n  return React.createElement(\"div\", {\n    style: {\n      width: size,\n      height: size\n    },\n    className: className,\n    onMouseDown: startDrag,\n    id: \"knob\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(Rotate, {\n    rotation: rotation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, children || React.createElement(KnobInner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(KnobHandle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }))));\n};\n\nexport default Knob;","map":{"version":3,"sources":["/home/daniel/code/@d10221-react-knob/packages/demo/src/knob/Knob.tsx"],"names":["React","useState","useEffect","BASE_HEIGHT","Rotate","css","KnobHandle","KnobInner","snap","number","increment","offset","Math","round","emptyKnobState","topPosition","xPosition","scale","knobCenter","cursorPos","getNormalizedValue","value","min","max","Knob","step","size","undefined","bufferSize","onChange","children","state","_setState","setState","changes","startDrag","e","preventDefault","knobRect","currentTarget","getBoundingClientRect","top","height","distance","abs","clientX","left","width","clientY","handleDrag","tempY","xDistance","normalizedValue","unnormalizedValue","setTimeout","document","addEventListener","endDrag","removeEventListener","rotation","className","style"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BASE_HEIGHT } from \"./Constants\";\nimport Rotate from \"./rotate\";\nimport css from \"./css\";\nimport KnobHandle from \"./KnobHandle\";\nimport KnobInner from \"./KnobInner\";\n\nfunction snap(number: number, increment = number, offset = number) {\n  return Math.round(number / increment) * increment + offset;\n}\n\nfunction emptyKnobState() {\n  return {\n    topPosition: 0,\n    xPosition: 0,\n    scale: 1,\n    knobCenter: [] as number[],\n    cursorPos: [] as number[],\n  };\n}\n\nfunction getNormalizedValue(value: number, min: number, max: number) {\n  return (value - min) / (max - min);\n}\n\nconst Knob = ({\n  value = 0,\n  min = 0,\n  max = 100,\n  step = 1,\n  size = undefined as number | string | undefined,\n  bufferSize = 360,\n  //\n  onChange = undefined as Function | undefined,\n  children = undefined as React.ReactNode | undefined,\n}) => {\n  const [state, _setState] = useState(emptyKnobState());\n\n  function setState(changes: Partial<typeof state>) {\n    _setState({ ...state, ...changes });\n  }\n\n  function startDrag(\n    e: PointerEvent | MouseEvent | React.MouseEvent | React.PointerEvent,\n  ) {\n    e.preventDefault();\n\n    const knobRect = (e.currentTarget! as HTMLElement).getBoundingClientRect();\n    const knobCenter = [\n      ,\n      knobRect.top + knobRect.height / 2,\n    ];\n\n    const distance = Math.abs(e.clientX - knobRect.left + knobRect.width / 2);\n    const scale = distance / 200 + 1;\n    const topPosition =\n      e.clientY -\n      (BASE_HEIGHT * scale -\n        getNormalizedValue(value, min, max) * (BASE_HEIGHT * scale));\n\n    function handleDrag(e: PointerEvent | MouseEvent) {\n      e.preventDefault();\n      const xPosition = e.clientX;\n      const tempY = e.clientY;\n\n      const xDistance = Math.abs(xPosition - (knobRect.left + knobRect.width / 2));\n      const scale = xDistance / 200 + 1;\n\n      let topPosition = state.topPosition;\n      // handle guide Y repositioning\n      if (tempY < topPosition) {\n        topPosition = tempY;\n      }\n      if (tempY > topPosition + BASE_HEIGHT * scale) {\n        topPosition = tempY - BASE_HEIGHT * scale;\n      }\n\n      const normalizedValue =\n        (100 - (tempY - topPosition) * (100 / (BASE_HEIGHT * scale))) / 100;\n      \n      const unnormalizedValue = snap(normalizedValue * (max - min), step, min);\n      setState({ topPosition, scale, cursorPos: [e.clientX, e.clientY] });\n      if (unnormalizedValue !== value) {\n        if (onChange) {\n          setTimeout(() => onChange(unnormalizedValue));\n        }\n      }\n    }\n\n    document.addEventListener(\"mousemove\", handleDrag, false);\n    document.addEventListener(\n      \"mouseup\",\n      function endDrag() {\n        document.removeEventListener(\"mousemove\", handleDrag, false);\n        document.removeEventListener(\"mouseup\", endDrag, false);\n        setState(emptyKnobState());\n      },\n      false,\n    );\n\n    setState({\n      xPosition: e.clientX,\n      topPosition,\n      scale,\n      knobCenter,\n      cursorPos: [e.clientX, e.clientY],\n    });\n  }\n  const rotation =\n    getNormalizedValue(value, min, max) * bufferSize - bufferSize / 2;\n\n  const className = \"xxx-yyy-000\";\n  const style = `\n  margin:0;\npadding: 0;\noverflow: hidden;\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\njustify-items: center;\nalign-items: center;\nalign-content: center;\n  `;\n  useEffect(() => css(style, className));\n  return (\n    <div\n      style={{\n        width: size,\n        height: size,\n      }}\n      className={className}\n      onMouseDown={startDrag}\n      id=\"knob\"\n    >\n      <Rotate rotation={rotation}>\n        {children || (\n          <KnobInner>\n            <KnobHandle />\n          </KnobInner>\n        )}\n      </Rotate>\n    </div>\n  );\n};\n\nexport default Knob;\n"]},"metadata":{},"sourceType":"module"}