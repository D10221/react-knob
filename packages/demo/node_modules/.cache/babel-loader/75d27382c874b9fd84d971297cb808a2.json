{"ast":null,"code":"import _objectSpread from \"/home/daniel/code/@d10221-react-knob/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/daniel/code/@d10221-react-knob/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/daniel/code/@d10221-react-knob/packages/demo/src/knob/Knob.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { BASE_HEIGHT } from \"./Constants\";\nimport Rotate from \"./rotate\";\nimport css from \"./css\";\nimport KnobHandle from \"./KnobHandle\";\nimport KnobInner from \"./KnobInner\";\n\nfunction snap(number, increment = number, offset = number) {\n  return Math.round(number / increment) * increment + offset;\n}\n\nfunction emptyKnobState() {\n  return {\n    topPosition: 0,\n    xPosition: 0,\n    scale: 1,\n    knobCenter: [],\n    cursorPos: []\n  };\n}\n\nfunction getNormalizedValue(value, min, max) {\n  return (value - min) / (max - min);\n}\n\nconst Knob = ({\n  value = 0,\n  min = 0,\n  max = 100,\n  step = 1,\n  size = undefined,\n  bufferSize = 360,\n  //\n  onChange = undefined,\n  children = undefined\n}) => {\n  const _useState = useState(emptyKnobState()),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        _setState = _useState2[1];\n\n  function setState(changes) {\n    _setState(_objectSpread({}, state, {}, changes));\n  }\n\n  function handleDrag(e) {\n    e.preventDefault();\n    const xPosition = e.clientX;\n    const tempY = e.clientY;\n    const xDistance = Math.abs(xPosition - knobCenter[0]);\n    const scale = xDistance / 200 + 1;\n    let topPosition = state.topPosition; // handle guide Y repositioning\n\n    if (tempY < topPosition) {\n      topPosition = tempY;\n    }\n\n    if (tempY > topPosition + BASE_HEIGHT * scale) {\n      topPosition = tempY - BASE_HEIGHT * scale;\n    }\n\n    const cursorPos = [e.clientX, e.clientY];\n    const normalizedValue = (100 - (tempY - topPosition) * (100 / (BASE_HEIGHT * scale))) / 100;\n    console.log({\n      xPosition,\n      xDistance,\n      scale,\n      BASE_HEIGHT,\n      topPosition,\n      tempY,\n      normalizedValue,\n      max,\n      min,\n      step\n    });\n    const unnormalizedValue = snap(normalizedValue * (max - min), step, min);\n    setState({\n      topPosition,\n      scale,\n      cursorPos\n    });\n\n    if (unnormalizedValue !== value) {\n      if (onChange) {\n        setTimeout(() => onChange(unnormalizedValue));\n      }\n    }\n  }\n\n  function endDrag() {\n    document.removeEventListener(\"mousemove\", handleDrag, false);\n    document.removeEventListener(\"mouseup\", endDrag, false);\n    setState(_objectSpread({}, state, {}, emptyKnobState()));\n  }\n\n  function startDrag(e) {\n    e.preventDefault();\n    const currentTarget = e.currentTarget,\n          clientX = e.clientX,\n          clientY = e.clientY;\n    const knobRect = currentTarget.getBoundingClientRect();\n    const knobCenter = [knobRect.left + knobRect.width / 2, knobRect.top + knobRect.height / 2];\n    const xPosition = clientX;\n    const distance = Math.abs(xPosition - knobCenter[0]);\n    const scale = distance / 200 + 1;\n    const topPosition = e.clientY - (BASE_HEIGHT * scale - getNormalizedValue(value, min, max) * (BASE_HEIGHT * scale));\n    const cursorPos = [clientX, clientY];\n    document.addEventListener(\"mousemove\", handleDrag, false);\n    document.addEventListener(\"mouseup\", endDrag, false);\n    setState({\n      xPosition,\n      topPosition,\n      scale,\n      knobCenter,\n      cursorPos\n    });\n  }\n\n  const rotation = getNormalizedValue(value, min, max) * bufferSize - bufferSize / 2;\n  const className = \"xxx-yyy-000\";\n  const style = `\n  margin:0;\npadding: 0;\noverflow: hidden;\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\njustify-items: center;\nalign-items: center;\nalign-content: center;\n  `;\n  useEffect(() => css(style, className));\n  return React.createElement(\"div\", {\n    style: {\n      width: size,\n      height: size\n    },\n    className: className,\n    onMouseDown: startDrag,\n    id: \"knob\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(Rotate, {\n    rotation: rotation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, children || React.createElement(KnobInner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(KnobHandle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }))));\n};\n\nexport default Knob;","map":{"version":3,"sources":["/home/daniel/code/@d10221-react-knob/packages/demo/src/knob/Knob.tsx"],"names":["React","useState","useEffect","BASE_HEIGHT","Rotate","css","KnobHandle","KnobInner","snap","number","increment","offset","Math","round","emptyKnobState","topPosition","xPosition","scale","knobCenter","cursorPos","getNormalizedValue","value","min","max","Knob","step","size","undefined","bufferSize","onChange","children","state","_setState","setState","changes","handleDrag","e","preventDefault","clientX","tempY","clientY","xDistance","abs","normalizedValue","console","log","unnormalizedValue","setTimeout","endDrag","document","removeEventListener","startDrag","currentTarget","knobRect","getBoundingClientRect","left","width","top","height","distance","addEventListener","rotation","className","style"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BASE_HEIGHT } from \"./Constants\";\nimport Rotate from \"./rotate\";\nimport css from \"./css\";\nimport KnobHandle from \"./KnobHandle\";\nimport KnobInner from \"./KnobInner\";\n\nfunction snap(number: number, increment = number, offset = number) {\n  return Math.round(number / increment) * increment + offset;\n}\n\nfunction emptyKnobState() {\n  return {\n    topPosition: 0,\n    xPosition: 0,\n    scale: 1,\n    knobCenter: [] as number[],\n    cursorPos: [] as number[],\n  };\n}\n\nfunction getNormalizedValue(value: number, min: number, max: number) {\n  return (value - min) / (max - min);\n}\n\nconst Knob = ({\n  value = 0,\n  min = 0,\n  max = 100,\n  step = 1,\n  size = undefined as number | string | undefined,\n  bufferSize = 360,\n  //\n  onChange = undefined as Function | undefined,\n  children = undefined as React.ReactNode | undefined,\n}) => {\n  const [state, _setState] = useState(emptyKnobState());\n\n  function setState(changes: Partial<typeof state>) {\n    _setState({ ...state, ...changes });\n  }\n  \n\n  function handleDrag(e: PointerEvent | MouseEvent) {\n    e.preventDefault();\n    const xPosition = e.clientX;\n    const tempY = e.clientY;\n    const xDistance = Math.abs(xPosition - knobCenter[0]);\n    const scale = xDistance / 200 + 1;\n\n    let topPosition = state.topPosition;\n\n    // handle guide Y repositioning\n    if (tempY < topPosition) {\n      topPosition = tempY;\n    }\n    if (tempY > topPosition + BASE_HEIGHT * scale) {\n      topPosition = tempY - BASE_HEIGHT * scale;\n    }\n\n    const cursorPos = [e.clientX, e.clientY];\n    const normalizedValue =\n      (100 - (tempY - topPosition) * (100 / (BASE_HEIGHT * scale))) / 100;\n    \n    console.log({\n      xPosition,\n      xDistance,\n      scale,\n      BASE_HEIGHT,\n      topPosition,\n      tempY,\n      normalizedValue,\n      max,\n      min,\n      step,\n    })\n    const unnormalizedValue = snap(normalizedValue * (max - min), step, min);\n    setState({ topPosition, scale, cursorPos });\n    if (unnormalizedValue !== value) {\n      if (onChange) {\n        setTimeout(() => onChange(unnormalizedValue));\n      }\n    }\n  }\n\n  function endDrag() {\n    document.removeEventListener(\"mousemove\", handleDrag, false);\n    document.removeEventListener(\"mouseup\", endDrag, false);\n    setState({ ...state, ...emptyKnobState() });\n  }\n\n  function startDrag(\n    e: PointerEvent | MouseEvent | React.MouseEvent | React.PointerEvent,\n  ) {\n    e.preventDefault();\n\n    const { currentTarget, clientX, clientY } = e;\n\n    const knobRect = (currentTarget! as HTMLElement).getBoundingClientRect();\n    const knobCenter = [\n      knobRect.left + knobRect.width / 2,\n      knobRect.top + knobRect.height / 2,\n    ];\n\n    const xPosition = clientX;\n    const distance = Math.abs(xPosition - knobCenter[0]);\n    const scale = distance / 200 + 1;\n    const topPosition =\n      e.clientY -\n      (BASE_HEIGHT * scale -\n        getNormalizedValue(value, min, max) * (BASE_HEIGHT * scale));\n\n    const cursorPos = [clientX, clientY];\n\n    document.addEventListener(\"mousemove\", handleDrag, false);\n    document.addEventListener(\"mouseup\", endDrag, false);\n\n    setState({\n      xPosition,\n      topPosition,\n      scale,\n      knobCenter,\n      cursorPos,\n    });\n  }\n  const rotation =\n    getNormalizedValue(value, min, max) * bufferSize - bufferSize / 2;\n\n  const className = \"xxx-yyy-000\";\n  const style = `\n  margin:0;\npadding: 0;\noverflow: hidden;\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\njustify-items: center;\nalign-items: center;\nalign-content: center;\n  `;\n  useEffect(() => css(style, className));\n  return (\n    <div\n      style={{\n        width: size,\n        height: size,\n      }}\n      className={className}\n      onMouseDown={startDrag}\n      id=\"knob\"\n    >\n      <Rotate rotation={rotation}>\n        {children || (\n          <KnobInner>\n            <KnobHandle />\n          </KnobInner>\n        )}\n      </Rotate>\n    </div>\n  );\n};\n\nexport default Knob;\n"]},"metadata":{},"sourceType":"module"}