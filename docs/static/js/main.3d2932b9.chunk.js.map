{"version":3,"sources":["../../src/classNames.ts","../../src/randomName.ts","../../src/css.ts","../../src/react-css.ts","../../src/defaults.ts","../../src/KnobContainer.tsx","../../src/rotate.ts","../../src/utils.ts","../../src/SkinCss.tsx","../../src/KnobOverlay.tsx","../../src/SkinSvg.tsx","../../src/SkinSvgSimple.tsx","../../src/Knob.tsx","../../src/KnobState.ts","../../src/PointerHandler.tsx","serviceWorker.js","index.tsx"],"names":["classNames","names","filter","Boolean","join","const","AZ","i","String","fromCharCode","let","az","_09_","__internal","chars","randomChar","charAt","Math","floor","random","length","randomName","size","gen","seed","useStyle","style","className","useEffect","styles","inject","element","document","createElement","innerHTML","head","appendChild","removeChild","BASE_HEIGHT","cssName","KnobContainer","React","Object","width","height","Children","map","children","c","isValidElement","props","cloneElement","touchAction","pointerEvents","Rotate","transform","transformOrigin","Fragment","child","getNormalizedValue","value","min","max","circleClassName","Circle","DEFAULT_COLOR","borderColor","color","dialClassName","Dial","KnobSkin","circleClass","dialClass","KnobOverlay","x","y","baseLineStyle","position","top","left","backgroundColor","overlayColor","cursorPos","knobCenter","sqrt","atan2","PI","verticalLineScale","scale","assign","opacity","topPosition","overlay","zIndex","window","innerWidth","innerHeight","cursor","knobPath","bodyPath","topPath","centerPath","bottomPath","DEFAULT_CLASSES","outter","inner","labels","DEFAULT_STYLES","outterCicleClass","innerCircleClass","labelClass","SvgSkin","viewBox","focusable","cx","cy","r","classes","Labels","rotation","bufferSize","ZERO_TO_TEN","TextLabel","dominantBaseline","textAnchor","deg","parseFloat","toFixed","useState","requestAnimationFrame","setChildren","index","key","id","circle","dial","undefined","SimpleSkin","rest","onChange","setState","start","move","done","useKnobState","val","_onchange","onPointerDown","ev","preventDefault","currentTarget","HTMLElement","startY","clientY","knobRect","getBoundingClientRect","onDown","rect","node","doc","ownerDocument","addEventListener","onPointerMove","removeEventListeners","removeEventListener","onUp","me","clientX","abs","number","increment","offset","unnormalizedValue","step","round","onMove","containerProps","noOverlay","location","hostname","match","Icon","label","role","aria-label","aria-hidden","skins","ReactDOM","render","dialogOpen","skin","changeValue","handleInputValueChanged","e","target","valueAsNumber","handleDialogOpen","open","handleSizeChanged","onNoOverlayChanged","checked","handleChangeSkin","href","onClick","renderSkin","type","onClickAway","htmlFor","body","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d2932b9.chunk.js","sourcesContent":["/** */\nexport default function classNames(\n  ...names: (string | null | undefined | false)[]\n): string | undefined {\n  return names && names.filter(Boolean).join(\" \");\n}\n","/**\n * ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\n */\nlet AZ = \"\";\nfor (let i = 65; i <= 65 + 25; i++) AZ += String.fromCharCode(i);\nlet az = \"\";\nfor (let i = 97; i <= 97 + 25; i++) az += String.fromCharCode(i);\nlet _09_ = \"\";\nfor (let i = 0; i <= 9; i++) _09_ += `${i}`;\nexport const __internal = {\n  chars: AZ + az + _09_,\n};\n/** */\nexport function randomChar(chars: string) {\n  return chars.charAt(Math.floor(Math.random() * chars.length));\n}\nexport default function randomName(size = 10) {\n  function gen(seed: string): string {\n    if (seed.length >= size) return seed;\n    const next = randomChar(__internal.chars);\n    return gen(seed + next);\n  }\n  return gen(randomChar(AZ + az));\n}","/**\n *\n * @param styles\n * @returns dispose\n */\nconst inject = (styles: string) => {\n  const element = document.createElement(\"style\");\n  element.innerHTML = styles;\n  document.head.appendChild(element);\n  // dispose\n  return () => {\n    document.head.removeChild(element);\n  };\n};\n/**\n *\n * @param styles\n * @param className\n */\nexport default function createStyle(styles: string, className: string) {\n  return inject(`.${className} {${styles}}`);\n}\n","import { useEffect } from \"react\";\nimport css from \"./css\";\nimport randomName from \"./randomName\";\n/** */\nexport default function useStyle(style: string, className = randomName()) {  \n  useEffect(() => css(style, className));\n  return className;\n}\n","export const BASE_HEIGHT = 100;\nexport const DEFAULT_BUFFER_SIZE = 300;\nexport const DEFAULT_SIZE = 65;\nexport const DEFAULT_STEP = 1;\nexport const DEFAULT_MAX = 100;\nexport const DEFAULT_VALUE = 0;\nexport const DEFAULT_MIN = 1;\n/**\n * Roland color\n */\nexport const DEFAULT_COLOR = \"#f37d02\";\nexport const DEFAULT_BORDER_COLOR = \"black\";\n/** */\nexport const defaults = {\n  value: DEFAULT_VALUE,\n  min: DEFAULT_MIN,\n  max: DEFAULT_MAX,\n  step: DEFAULT_STEP,\n  size: DEFAULT_BUFFER_SIZE as number | string,\n  bufferSize: DEFAULT_BUFFER_SIZE,\n};\n","import React, { FunctionComponent } from \"react\";\nimport classNames from \"./classNames\";\nimport useStyle from \"./react-css\";\nimport { DEFAULT_SIZE } from \"./defaults\";\nimport randomName from \"./randomName\";\nconst cssName = randomName();\nexport type KnobContainerProps = Partial<\n  React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\n> & {\n  size: number | string;\n};\nconst cssclass = `\n  margin:0;\n  padding: 0;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  justify-items: center;\n  align-items: center;\n  align-content: center;  \n    `;\n/** \n * @description sets overall size removes touch action from inner children\n * \n*/\nconst KnobContainer: FunctionComponent<KnobContainerProps> = ({\n  children,\n  size = DEFAULT_SIZE,\n  className,\n  style,\n  ...props\n}) => {\n  return (\n    <div\n      {...props}\n      style={{\n        ...style,\n        width: size,\n        height: size,\n      }}\n      className={classNames(useStyle(cssclass, cssName), className)}\n    >\n      {React.Children.map(children, (c => {\n        if (React.isValidElement(c)) {\n          const { style, ...p } = c.props;\n          return React.cloneElement(c, {\n            ...p, style: {\n              ...style,\n              // disable children 'clicks'\n              touchAction: \"none\",\n              pointerEvents: \"none\",\n            } as React.CSSProperties\n          })\n        }\n        return c;\n      }))}\n    </div>\n  );\n};\n\nexport default KnobContainer;\n","import React, { FunctionComponent } from \"react\";\n/**\n * Applies style transform to children  \n */\nconst Rotate: FunctionComponent<{ rotation: number; translateZ?: number | undefined }> = ({\n  rotation,\n  translateZ,\n  children,\n}) => {\n  const style: React.CSSProperties = {\n    transform: `rotate(${rotation}deg) translateZ(${translateZ || 0}px)`,\n    transformOrigin: \"50% 50%\",\n  };\n  return React.createElement(\n    React.Fragment,\n    {},\n    React.Children.map(children, child => {\n      if (React.isValidElement(child)) {\n        return React.cloneElement(child, {\n          style: {\n            ...child.props.style,\n            ...style,\n          },\n        });\n      }\n      return child;\n    }),\n  );\n}; export default Rotate;\n","/** */\nexport function snap(number: number, increment = number, offset = number) {\n  return Math.round(number / increment) * increment + offset;\n}\n/** */\nexport function getNormalizedValue(value: number, min: number, max: number) {\n  return (value - min) / (max - min);\n}\n/** */\nexport function isHtmlElement(e: any): e is HTMLElement {\n  return e instanceof HTMLElement;\n}\n/** */\nexport const cartesian2Polar: (\n  x: number[],\n  y: number[],\n) => { distance: number; degrees: number } =\n  /** */\n  ([x1, y1], [x2, y2]) => {\n    const x = x2 - x1;\n    const y = y2 - y1;\n    const distance = Math.sqrt(x * x + y * y);\n    const radians = Math.atan2(y, x);\n    const degrees = radians * (180 / Math.PI);\n    return { distance, degrees };\n  };\n/** */\nexport function getRotation({\n  value = 0,\n  min = 0,\n  max = 100,\n  bufferSize = 360,\n}) {\n  return getNormalizedValue(value, min, max) * bufferSize - bufferSize / 2;\n}\n/** */\nexport const ownerDocument = (node?: Element | Text | null | undefined) =>\n  (node && node.ownerDocument) || document;\n/** */  \nexport function round(n: number, decimals?: number) {\n  return parseFloat(n.toFixed(decimals));\n}","import React, { FunctionComponent } from \"react\";\nimport useStyle from \"./react-css\";\nimport classNames from \"./classNames\";\nimport randomName from \"./randomName\";\nimport { DEFAULT_BORDER_COLOR, DEFAULT_COLOR } from \"./defaults\";\n/** */\ntype CircleProps = Partial<\n  React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\n> & {\n  borderColor?: string;\n};\n/** preformance issues */\nconst circleClassName = randomName();\n/** */\nconst Circle: FunctionComponent<CircleProps> = ({\n  children,\n  className,\n  borderColor = DEFAULT_BORDER_COLOR,\n  color = DEFAULT_COLOR,\n  ...props\n}) => {\n  return (\n    <div\n      className={classNames(\n        className,\n        useStyle(\n          `\n      position: relative;\n      width: 85%;\n      height: 85%;\n      border-radius: 50%;\n      border: solid ${borderColor} 5px;  \n      background-color: ${color};\n      margin:0;\n      padding: 0;\n      overflow: hidden;\n      `,\n          circleClassName,\n        ),\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\ntype DialProps = Partial<\n  React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\n>;\n/** preformance */\nconst dialClassName = randomName();\n/** */\nconst Dial: FunctionComponent<DialProps> = ({\n  children,\n  className,\n  color = DEFAULT_BORDER_COLOR,\n  ...props\n}) => {\n  return (\n    <div\n      className={classNames(\n        className,\n        useStyle(\n          `\n      position: relative;\n      width: 10%;\n      height: 45%;\n      background-color: ${color};\n      top: -5%;\n      left: 50%;\n      transform: translateX(-50%);  \n      margin:0;\n      padding: 0;\n      `,\n          dialClassName,\n        ),\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n/**\n * Default skin\n    note: \n    because the knob component injects css, \n    it's css will be last \n    on every render\n    and will have higher priority, \n    to override color from 'main' css \n    mak overriding rule as !important \n */\nconst KnobSkin: FunctionComponent<CircleProps & {\n  circleClass?: string | undefined;\n  dialClass?: string | undefined;\n}> = ({ color, borderColor, circleClass, dialClass, ...props }) => (\n  <Circle\n    {...props}\n    color={color}\n    borderColor={borderColor}\n    className={circleClass}\n  >\n    <Dial color={borderColor} className={dialClass} />\n  </Circle>\n);\nexport default KnobSkin;\n","import React, { FunctionComponent } from \"react\";\nimport { BASE_HEIGHT } from \"./defaults\";\nimport { cartesian2Polar } from \"./utils\";\n\ntype KnobOverlayProps = {\n  topPosition: number;\n  scale: number;\n  knobCenter: number[];\n  cursorPos: number[];\n  overlayColor?: string | undefined;\n};\n\nconst KnobOverlay: FunctionComponent<KnobOverlayProps> = ({\n  topPosition = 0,\n  scale = 1,\n  knobCenter = [],\n  cursorPos = [],\n  overlayColor = \"#fff\",\n}) => {\n  const baseLineStyle = {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: 1,\n    height: 1,\n    backgroundColor: overlayColor,\n  };\n\n  const { distance, degrees } = cartesian2Polar(knobCenter, cursorPos);\n  const verticalLineScale = BASE_HEIGHT * scale;\n\n  const knobPath = Object.assign({}, baseLineStyle, {\n    opacity: 0.5,\n    transformOrigin: \"left center\",\n    transform:\n      `translateX(${knobCenter[0]}px) translateY(${knobCenter[1]}px) translateZ(0) ` +\n      `rotate(${degrees}deg) ` +\n      `scaleX(${distance})`,\n  });\n\n  const bodyPath = Object.assign({}, baseLineStyle, {\n    transformOrigin: \"center top\",\n    transform:\n      `translateX(${cursorPos[0]}px) translateY(${topPosition}px) translateZ(0) ` +\n      `scaleY(${verticalLineScale})`,\n  });\n\n  const topPath = Object.assign({}, baseLineStyle, {\n    transform:\n      `translateX(${cursorPos[0]}px) translateY(${topPosition}px) translateZ(0) ` +\n      `scaleX(12)`,\n  });\n\n  const centerPath = Object.assign({}, baseLineStyle, {\n    transform:\n      `translateX(${cursorPos[0]}px) ` +\n      `translateY(${topPosition + verticalLineScale / 2}px) ` +\n      `translateZ(0) scaleX(12)`,\n  });\n\n  const bottomPath = Object.assign({}, baseLineStyle, {\n    transform:\n      `translateX(${cursorPos[0]}px) ` +\n      `translateY(${topPosition + verticalLineScale}px) ` +\n      `translateZ(0) scaleX(12)`,\n  });\n\n  const styles: {[key: string]: React.CSSProperties} = {\n    knobPath,\n    bodyPath,\n    topPath,\n    centerPath,\n    bottomPath,\n    overlay: {\n      position: \"fixed\",\n      zIndex: 100,\n      top: 0,\n      left: 0,\n      width: window.innerWidth,\n      height: window.innerHeight,\n      cursor: \"ns-resize\",\n      touchAction: \"none\",\n      pointerEvents: \"none\",\n    },\n  };\n\n  return (\n    <div style={styles.overlay}>\n      <div style={styles.knobPath}></div>\n      <div style={styles.bodyPath}></div>\n      <div style={styles.topPath}></div>\n      <div style={styles.centerPath}></div>\n      <div style={styles.bottomPath}></div>\n    </div>\n  );\n};\n\nexport default KnobOverlay;\n","import React, { SVGProps, useState, FunctionComponent } from \"react\";\r\nimport { round } from \"./utils\";\r\nimport Rotate from \"./rotate\";\r\nimport { DEFAULT_BUFFER_SIZE } from \"./defaults\";\r\nimport randomName from \"./randomName\";\r\nimport classNames from \"./classNames\";\r\nimport useStyle from \"./react-css\";\r\n/** */\r\nconst DEFAULT_CLASSES = {\r\n    outter: undefined,\r\n    inner: undefined,\r\n    labels: undefined\r\n}\r\n/** */\r\nconst DEFAULT_STYLES = {\r\n    outter: undefined,\r\n    inner: undefined,\r\n    labels: undefined,\r\n}\r\n/** cached  */\r\nconst outterCicleClass = randomName();\r\n/** cached  */\r\nconst innerCircleClass = randomName();\r\n/** cached  */\r\nconst labelClass = randomName();\r\n/**\r\n * @description fancy svg skin \r\n */\r\nconst SvgSkin: FunctionComponent<SVGProps<SVGSVGElement> & {\r\n    bufferSize: number,\r\n    classes?: {\r\n        outter?: string | undefined,\r\n        inner?: string | undefined,\r\n        labels?: string | undefined\r\n    },\r\n    styles?: {\r\n        outter?: React.CSSProperties | undefined,\r\n        inner?: React.CSSProperties | undefined\r\n        labels?: React.CSSProperties | undefined\r\n    }\r\n}> = ({ className, bufferSize = DEFAULT_BUFFER_SIZE, style, styles = DEFAULT_STYLES, classes = DEFAULT_CLASSES, ...props }) => {\r\n    useStyle(`fill: black`, outterCicleClass);\r\n    useStyle(`fill: darkgrey`, innerCircleClass);\r\n    useStyle(`    \r\n    stroke: whitesmoke;\r\n    font-size: .8rem;\r\n    `, labelClass);\r\n    return <svg className={className}\r\n        viewBox=\"0 0 100 100\"\r\n        focusable={\"false\"}\r\n        style={{\r\n            // HAVE! to transfer down the transform\r\n            ...style,\r\n            touchAction: \"none\",\r\n        }}\r\n        {...props}\r\n    >\r\n        <g>\r\n            <circle\r\n                cx=\"50%\"\r\n                cy=\"50%\"\r\n                r={\"47%\"}\r\n                className={classNames(outterCicleClass, classes.outter)}\r\n                style={{ ...styles.outter }}\r\n            />\r\n            <circle\r\n                cx=\"50%\"\r\n                cy=\"50%\"\r\n                r={\"25%\"}\r\n                className={classNames(innerCircleClass, classes.inner)}\r\n                style={{ ...styles.inner }}\r\n            />\r\n            <Labels\r\n                rotation={bufferSize}\r\n                labels={ZERO_TO_TEN}\r\n                y=\"12.5\"\r\n                className={classNames(labelClass, classes.labels)}\r\n                style={{ ...styles.labels }}\r\n            />\r\n        </g>\r\n    </svg>\r\n}\r\nexport default SvgSkin;\r\n\r\n/** */\r\nconst ZERO_TO_TEN = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n/** */\r\nconst TextLabel: FunctionComponent<React.SVGProps<SVGTextElement>> = ({\r\n    children,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <svg\r\n            viewBox=\"0 0 100 100\"\r\n            style={{ pointerEvents: \"none\", touchAction: \"none\" }}\r\n        >\r\n            <text dominantBaseline=\"middle\" textAnchor=\"middle\" {...props}>\r\n                {children}\r\n            </text>\r\n        </svg>\r\n    );\r\n};\r\n/**\r\n *\r\n */\r\nconst Labels: FunctionComponent<\r\n    SVGProps<SVGTextElement> & {\r\n        labels: any[];\r\n        rotation: number;\r\n    }\r\n> = ({ labels, rotation, id, ...props }) => {\r\n    labels = labels && labels.length ? labels : [];\r\n    const deg = round((rotation) / (labels.length - 1), 2);\r\n    const [children, setChildren] = useState([] as any);\r\n    if (!children.length)\r\n        requestAnimationFrame(() => {\r\n            setChildren(labels!.map((x, index) => {\r\n                return <Rotate rotation={index * deg * -1} key={`${id}-label-${index}`}>\r\n                    <TextLabel\r\n                        id={`${id}-label-${index}`}\r\n                        x={\"50%\"}\r\n                        y={\"10%\"}\r\n                        {...props}\r\n                        children={x}\r\n                    />\r\n                </Rotate>\r\n            }))\r\n        });\r\n    return children;\r\n};\r\n\r\n","import React, { CSSProperties } from \"react\";\r\nimport randomName from \"./randomName\";\r\nimport classNames from \"./classNames\";\r\nimport useStyle from \"./react-css\";\r\nimport { DEFAULT_COLOR } from \"./defaults\";\r\nconst circleClass = randomName();\r\nconst dialClass = randomName();\r\nconst DEFAULT_STYLES = {\r\n  circle: undefined,\r\n  dial: undefined\r\n}\r\nconst DEFAULT_CLASSES = {\r\n  circle: undefined,\r\n  dial: undefined\r\n}\r\n/**\r\n * It needs to forward down the style: transform\r\n */\r\nexport default function SimpleSkin(props: React.SVGProps<SVGSVGElement> & {\r\n  classes?: {\r\n    circle?: string | undefined,\r\n    dial?: string | undefined,\r\n  },\r\n  styles?: {\r\n    circle?: CSSProperties | undefined,\r\n    dial?: CSSProperties | undefined,\r\n  }\r\n}) {\r\n  const { className, style, styles = DEFAULT_STYLES, classes = DEFAULT_CLASSES, ...rest } = props;\r\n  useStyle(`fill: ${DEFAULT_COLOR}; stroke: black; stroke-width: 9%`, circleClass);\r\n  useStyle(`width: 8%;height: 35%; fill: black;`, dialClass);\r\n  return <svg\r\n    viewBox=\"0 0 100 100\"\r\n    focusable={\"false\"}\r\n    className={className}\r\n    style={{\r\n      ...style,\r\n      touchAction: \"none\"\r\n    }}\r\n    {...rest}>\r\n    <circle\r\n      cx=\"50%\"\r\n      cy=\"50%\"\r\n      r={\"47%\"}\r\n      className={classNames(circleClass, classes.dial)}\r\n      style={styles.circle}\r\n    />\r\n    <rect\r\n      x=\"48%\" y=\"4%\"\r\n      className={classNames(dialClass, classes.dial)}\r\n      style={styles.dial} />\r\n  </svg>\r\n}","import React, { FunctionComponent } from \"react\";\nimport KnobContainer, { KnobContainerProps } from \"./KnobContainer\";\nimport Rotate from \"./rotate\";\nimport PointerHandler from \"./PointerHandler\";\nimport { getRotation } from \"./utils\";\nimport KnobSkin from \"./SkinCss\";\nimport {\n  DEFAULT_SIZE,\n  DEFAULT_STEP,\n  DEFAULT_MAX,\n  DEFAULT_MIN,\n  DEFAULT_VALUE,\n  DEFAULT_BUFFER_SIZE\n} from \"./defaults\";\nimport KnobOverlay from \"./KnobOverlay\";\nimport useKnobState from \"./KnobState\";\ntype OnChange = (value: number) => any;\n/**\n * Creates a knob with default skin if no children provided\n * Holds internal state\n * Applies rotation via style.transform property\n * Gate for options\n * Controls overlay visibility  \n */\nconst Knob: FunctionComponent<{\n  /**\n   * Holds the value to be translated to rotation amount\n   * @required\n   * @default 0\n   */\n  value: number;\n  /** @description minimum applicable value @default 0*/\n  min?: number;\n  /** @description maximum applicable value @default 100*/\n  max?: number;\n  /** Step size @default 1 */\n  step: number;\n  /**\n   * @description will be applied as 'width' and 'height' equally as style property\n   * @optional   \n   * @default 65px   \n   * */\n  size?: number | string | undefined;\n  /**\n   * @description total rotation in deg, ex: 360°\n   */\n  bufferSize?: number;\n  /**\n   * do not render overlay\n   */\n  noOverlay?: boolean | undefined;\n  /**\n   * @optional\n   * @description callback with the new value   \n   */\n  onChange?: OnChange | undefined;\n  /**\n   * @description allows override this component main container props see './KnobContainer'\n   * \n   */\n  containerProps?: Omit<KnobContainerProps, \"size\"> | undefined | undefined\n}> = ({\n  value = DEFAULT_VALUE,\n  min = DEFAULT_MIN,\n  max = DEFAULT_MAX,\n  step = DEFAULT_STEP,\n  size = DEFAULT_SIZE,\n  bufferSize = DEFAULT_BUFFER_SIZE,\n  //\n  noOverlay = false,\n  // ...\n  onChange: _onchange = undefined as OnChange | undefined,\n  children = undefined as React.ReactNode | undefined,\n  containerProps = undefined,\n}) => {\n\n    const onChange: OnChange = val =>\n      typeof _onchange === \"function\" && val !== value && _onchange(val);\n\n    const { state, move, done, start } = useKnobState(onChange);\n    const { cursorPos, knobCenter, scale, topPosition } = state;\n    const onPointerDown = PointerHandler({\n      value,\n      min,\n      max,\n      step,\n      onMove: move,\n      onDown: start,\n      onUp: done,\n    });\n    const rotation = getRotation({ value, min, max, bufferSize });\n    return (\n      <KnobContainer\n        size={size}\n        onPointerDown={onPointerDown}\n        {...containerProps}\n      >\n        <Rotate rotation={rotation}>\n          {children || <KnobSkin />}\n        </Rotate>\n        {noOverlay || !topPosition ? null : (\n          <KnobOverlay\n            cursorPos={cursorPos}\n            knobCenter={knobCenter}\n            scale={scale}\n            topPosition={topPosition}\n          />\n        )}\n      </KnobContainer>\n    );\n  };\n\nexport default Knob;\n","import { useState } from \"react\";\n/** */\nexport default function useKnobState(onChange?: (value: number) => any) {\n  const [state, setState] = useState({\n    scale: 1,\n    cursorPos: [] as number[],\n    knobCenter: [] as number[],\n    topPosition: 0,\n  });\n  return {\n    state,\n    setState,\n    start: () => {\n      /* noop */\n    },\n    move: ({\n      value = 0,\n      cursorPos = [] as number[],\n      knobCenter = [] as number[],\n      scale = 1,\n      topPosition = 0,\n    }) => {\n      if (onChange) onChange(value);\n      setState({ cursorPos, knobCenter, scale, topPosition });\n    },\n    done: () => {\n      setState({ scale: 1, cursorPos: [], knobCenter: [], topPosition: 0 });\n    },\n  };\n}\n","import React from \"react\";\nimport { BASE_HEIGHT } from \"./defaults\";\nimport {\n  isHtmlElement,\n  getNormalizedValue,\n  snap,\n  ownerDocument,\n} from \"./utils\";\n/** */\ntype OnChange = (changes: {\n  value: number;\n  scale: number;\n  cursorPos: number[];\n  knobCenter: number[];\n  topPosition: number;\n}) => any;\n/** */\ntype OnUp = () => any;\ntype OnDown = (x: {\n  clientY: number,\n  rect: number[],\n}) => any;\n/** \n * Creates an event handler with inbuilt logic\n */\ntype PointerHandler = (p: {\n  value: number;\n  min: number;\n  max: number;\n  step: number;\n  onMove: OnChange;\n  onUp?: OnUp;\n  onDown?: OnDown;\n}) => (\n    e: PointerEvent | MouseEvent | React.MouseEvent | React.PointerEvent,\n  ) => any;\n/**\n * TODO: move logic out?, leave just the events ? \n * @param config Creates parent document bound pointer events handler\n */\nconst PointerHandler: PointerHandler = ({\n  value = 0,\n  min = 0,\n  max = 100,\n  step = 1,\n  onMove,\n  onUp,\n  onDown\n}) => ev => {\n  ev.preventDefault();\n  const { currentTarget } = ev;\n  if (!isHtmlElement(currentTarget)) return;\n  const startY = ev.clientY; //hold initial Y value  \n  const knobRect = (currentTarget as any).getBoundingClientRect();\n  if (typeof onDown === \"function\") onDown({\n    // TODO: opportunity to move logic up\n    clientY: ev.clientY,\n    rect: knobRect\n  });\n  /** */\n  function onPointerMove(me: PointerEvent | MouseEvent) {\n    me.preventDefault();\n    const { clientX, clientY } = me;\n    const xDistance = Math.abs(clientX - (knobRect.left + knobRect.width / 2));\n    const scale = xDistance / 200 + 1;\n    let topPosition =\n      clientY -\n      (BASE_HEIGHT * scale -\n        getNormalizedValue(value, min, max) * (BASE_HEIGHT * scale));\n    // handle guide Y repositioning\n    if (startY < topPosition) {\n      topPosition = startY;\n    }\n    if (startY > topPosition + BASE_HEIGHT * scale) {\n      topPosition = startY - BASE_HEIGHT * scale;\n    }\n    const normalizedValue =\n      (100 - (startY - topPosition) * (100 / (BASE_HEIGHT * scale))) / 100;\n    const unnormalizedValue = snap(normalizedValue * (max - min), step, min);\n    if (unnormalizedValue !== value && onMove) {\n      onMove({\n        // TODO: opportunity to move logic up\n        value: unnormalizedValue,\n        scale,\n        cursorPos: [clientX, clientY],\n        knobCenter: [\n          knobRect.left + knobRect.width / 2,\n          knobRect.top + knobRect.height / 2,\n        ],\n        topPosition,\n      });\n    }\n  }\n  const doc = ownerDocument(currentTarget); // multi doc support ?\n  doc.addEventListener(\"pointermove\", onPointerMove, false);\n  doc.addEventListener(\n    \"pointerup\",\n    function removeEventListeners() {\n      doc.removeEventListener(\"pointermove\", onPointerMove, false);\n      doc.removeEventListener(\"pointerup\", removeEventListeners, false);\n      if (typeof onUp === \"function\") onUp(); // TODO: opportunity to move logic up\n    },\n    false,\n  );\n};\nexport default PointerHandler;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState, ChangeEvent } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Knob, { SkinCss, SkinSvg, SkinSvgSimple } from \"@d10221/react-knob\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ClickAwayListener from \"@d10221/react-click-away-listener\";\nconst repoUrl = \"https://github.com/D10221/react-knob\";\nconst issuesUrl = \"https://github.com/D10221/react-knob/issues\";\n/** */\nconst Icon = ({ label = \"\", value = \"\", className = \"icon\" }) => (\n  <span\n    className={className}\n    role=\"img\"\n    aria-label={label || \"\"}\n    aria-hidden={!Boolean(label)}\n  >\n    {value}\n  </span>\n);\nconst BUFFER_SIZE = 300;\nconst DEFAULT_SKIN = \"svg:1\";\nconst skins = [\"css\", \"css:custom\", \"svg:1\", \"svg:2\"];\n/**\n * \n */\nfunction renderSkin({ skin = DEFAULT_SKIN, bufferSize = BUFFER_SIZE }) {\n  switch (skin) {\n    case \"css\": {\n      // No Class   \n      return <SkinCss />\n    }\n    case \"css:custom\": {\n      // circleClass:optional\n      // dialClass:optional\n      // dialClass={\"knob-dial\"}\n      return <SkinCss circleClass={\"knob-circle\"} />\n    }\n    case \"svg:1\":\n      {\n        // local sample: \n        return <SkinSvgSimple\n          // styles={{ dial: { fill: \"white\" } }}\n          // classes={{ dial: \"red-dial\"}}\n        />\n      }\n    case \"svg:2\":\n      {\n        // inbuild svg?\n        return <SkinSvg\n          bufferSize={bufferSize}\n          classes={{\n            // labels: \"red-labels\"\n          }}\n          styles={{\n            labels: {\n              // display: \"none\"\n            }\n          }}\n        />\n      }\n    default: return null; //default skin\n  }\n}\n/** */\nconst App = () => {\n  const [{ value, dialogOpen, size, noOverlay, skin, bufferSize }, setState] = useState({\n    value: 0,\n    dialogOpen: false,\n    size: 65,\n    noOverlay: false,\n    skin: DEFAULT_SKIN,\n    bufferSize: BUFFER_SIZE,\n  });\n  function changeValue(value: number) {\n    if (value < 0) return;\n    if (value > 100) return;\n    setState({ value, dialogOpen, size, noOverlay, skin, bufferSize });\n  }\n  function handleInputValueChanged(e: ChangeEvent<HTMLInputElement>) {\n    changeValue(e.target.valueAsNumber);\n  }\n  function handleDialogOpen(open: boolean) {\n    return () => setState({ value, dialogOpen: open, size, noOverlay, skin, bufferSize });\n  }\n  function handleSizeChanged(e: ChangeEvent<HTMLInputElement>) {\n    setState({ value, dialogOpen, size: e.target.valueAsNumber, noOverlay, skin, bufferSize });\n  }\n  function onNoOverlayChanged(e: ChangeEvent<HTMLInputElement>) {\n    setState({\n      value,\n      dialogOpen,\n      noOverlay: !e.target.checked,\n      size,\n      skin,\n      bufferSize\n    });\n  }\n  function handleChangeSkin(e: React.MouseEvent<HTMLButtonElement>) {\n    setState({\n      value,\n      dialogOpen,\n      noOverlay,\n      size,\n      bufferSize,\n      skin: e.currentTarget.value\n    })\n  }\n  /** */\n  function render() {\n    return (\n      <>\n        <header>\n          <a aria-label=\"project home\" href={repoUrl}>\n            React Knob\n          </a>\n          <button className=\"clear\" onClick={handleDialogOpen(true)}>\n            <Icon value=\"⚙\" label=\"Settings\" />\n          </button>\n        </header>\n        <main>\n          <Knob\n            value={value}\n            onChange={changeValue}\n            size={size}\n            min={0}\n            max={100}\n            step={1}\n            bufferSize={bufferSize}\n            noOverlay={noOverlay}\n          >\n            {/* Children are Optional: defaults to 'KnobSkin' */}\n            {renderSkin({ skin, bufferSize })}\n          </Knob>\n          <input\n            aria-label=\"knob value\"\n            type=\"number\"\n            value={value}\n            onChange={handleInputValueChanged}\n            min={0}\n            max={100}\n          />\n        </main>\n        <footer>\n          <div>\n            <Icon value=\"💬\" label=\"Feedback\" />\n            <a href={issuesUrl}>Feedback</a>\n          </div>\n        </footer>\n        <ClickAwayListener onClickAway={handleDialogOpen(false)}>\n          <dialog open={dialogOpen}>\n            <div className=\"column\">\n              <div className=\"row\">\n                <label htmlFor=\"size-input-range\">Size</label>\n                <input\n                  id=\"size-input-range\"\n                  type=\"range\"\n                  min={25}\n                  max={250}\n                  value={size}\n                  onChange={handleSizeChanged}\n                />\n              </div>\n              <div className=\"row\">\n                <label htmlFor=\"no-overlay\">Overlay</label>\n                <input\n                  type=\"checkbox\"\n                  checked={!noOverlay}\n                  onChange={onNoOverlayChanged}\n                />\n              </div>\n              <div className=\"row\">\n                <label>Skin</label>\n                {skins.map(skin => (\n                  <button key={`${skin}`} className=\"clear\" onClick={handleChangeSkin} value={skin}>\n                    <Icon value={`${skin}`} className={\"numeral\"} />\n                  </button>))}\n              </div>\n            </div>\n          </dialog>\n        </ClickAwayListener>\n      </>\n    );\n  }\n  return render();\n};\n\nReactDOM.render(<App />, document.body);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}